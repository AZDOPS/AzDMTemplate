# This is the validate pipeline

trigger: none

pool: AzDM-VMSS

parameters:
- name: GitTestOutput
  displayName: Git testoutput.
  type: string
  default: "false"
  values:
  - "true"
  - "false"

variables:
- group: AzDM

steps:
- template: .templates/sharedSteps.yaml

- task: PowerShell@2
  displayName: Run JSON file verification tests
  inputs:
    targetType: 'inline'
    script: |
      $ModulePath = '$(Build.SourcesDirectory)/.module/AzDM.psm1'
      Write-Host "Importing AzDM module from $ModulePath"
      Import-Module $ModulePath -Force
      
      # We need the -Force flag on Get-ChildItem here because linux treats folders starting with '.' as secret and so the -Recurse will not traverse them.
      [array]$AllTests = Get-ChildItem -Path '$(Build.SourcesDirectory)/.tests' -Filter *.Tests.ps1 -Recurse -Force | Select-Object -ExpandProperty FullName
      $PesterConfiguration = New-PesterConfiguration
      $PesterConfiguration.Output.Verbosity = 'Detailed'
      $container = New-PesterContainer -Path $AllTests
      $PesterConfiguration.Run.Container = $container
      $PesterConfiguration.TestResult.Enabled = $true
      Invoke-Pester -Configuration $PesterConfiguration 

- task: PublishTestResults@2
  displayName: Publish test results
  condition: always()
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '**/test*.xml'
    failTaskOnFailedTests: true

- task: PowerShell@2
  displayName: Get diff
  inputs:
    targetType: 'inline'
    script: |
      $ModulePath = '$(Build.SourcesDirectory)/.module/AzDM.psm1'
      Write-Host "Importing AzDM module from $ModulePath"
      Import-Module $ModulePath -Force
      
      if ("${{ parameters.GitTestOutput }}" -eq "true") {
        [string[]]$gitChanges = Get-ChildItem $AZDMGlobalConfig['azdm_core']['rootfolder'] *.json -Recurse | Select-Object -ExpandProperty FullName
      }
      else {
        [string[]]$gitChanges = (getGitDiff | 
          Where-Object {
            ($_.Path.StartsWith($AZDMGlobalConfig['azdm_core']['rootfolder'])) -and
            ($_.Type -ne 'Deleted')
          }).path
        }

      if ($gitChanges.count -eq 0) {
        Write-Host "No git adds or changes in $($AZDMGlobalConfig['azdm_core']['rootfolder'])."
        Write-Host "Deletions are currently not supported and therefore ignored."
        Write-Host "##vso[task.setvariable variable=PostFeedback]false"
      }
      else {
        Write-Host "$($gitChanges.count) git changes in $($AZDMGlobalConfig['azdm_core']['rootfolder'])."
        $tmpFile = [System.IO.Path]::GetTempFileName().Replace('.tmp','.txt')
        $gitChanges | Out-File -FilePath $tmpFile
        Write-Host "##vso[task.setvariable variable=gitChangesFile;]$tmpFile"
        Write-Host "##vso[task.setvariable variable=PostFeedback]true"
      }

- task: PowerShell@2
  displayName: Gather WhatIf data
  condition: eq(variables['PostFeedback'], 'true')
  inputs:
    targetType: 'inline'
    script: |
      # In order for the needed classes to exist in Ubuntu we need to import the modules manually.
      Import-Module Microsoft.PowerShell.Utility, ADOPS

      $ModulePath = '$(Build.SourcesDirectory)/.module/AzDM.psm1'
      Write-Host "Importing AzDM module from $ModulePath"
      Import-Module $ModulePath -Verbose -Force
      
      Write-Host "Connecting to Org: $(AzDMOrganizationName), TenantID: $(AzDMTenantId)"
      Connect-ADOPS -ManagedIdentity -Organization $(AzDMOrganizationName) -TenantId $(AzDMTenantId) -SkipVerification

      [string[]]$GitChanges = Get-Content $(gitChangesFile)
      $WhatIfResults = Invoke-AzDM -GitChanges $GitChanges -WhatIf

      $tmpFile = [System.IO.Path]::GetTempFileName().Replace('.tmp','.txt')
      $WhatIfResults | Out-File -FilePath $tmpFile -Encoding utf8
      Write-Host "##vso[task.setvariable variable=WhatIfOutput;]$tmpFile"
    verbosePreference: 'continue'
    debugPreference: 'continue'
    failOnStderr: true
    pwsh: true


- task: PowerShell@2
  displayName: Post WhatIf feedback
  condition: eq(variables['PostFeedback'], 'true')
  inputs:
    targetType: 'inline'
    script: |      
        Write-Host "Connecting to Org: $(AzDMOrganizationName), TenantID: $(AzDMTenantId)"
        Connect-ADOPS -ManagedIdentity -Organization $(AzDMOrganizationName) -TenantId $(AzDMTenantId) -SkipVerification
        
        $messageString = Get-Content $(WhatIfOutput) -Encoding utf8 -Raw
        
        $uri = "$(System.CollectionUri)/$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=6.0"
        $method = 'Post'
        $body = [ordered]@{
            comments = @(
              @{
                "parentCommentId" = 0
                "commentType" = 1
                "content" = $messageString
              }
            )
        } | ConvertTo-Json

        Invoke-ADOPSRestMethod -Uri $uri -Method $method -Body $body
    verbosePreference: 'continue'
    debugPreference: 'continue'
    failOnStderr: true
    pwsh: true